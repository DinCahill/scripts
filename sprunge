#!/bin/bash
# Essentially http://www.shellperson.net/sprunge-pastebin-script/

printusage() {
    usage | fmt -s >&2
}

usage() {
    cat <<EOF

USAGE
  $0 filename.txt
  $0 text string
  $0 < filename.txt
  piped_data | $0

Try '$0 --help' for more information.
EOF
    exit
}

printhelp() {
    description | fmt -s >&2
}

description() {
    cat <<EOF

DESCRIPTION
  Upload data and fetch URL from the pastebin http://sprunge.us

USAGE
  $0 filename.txt
  $0 text string
  $0 < filename.txt
  piped_data | $0

NOTES
--------------------------------------------------------------------------
* INPUT METHODS *
$0 can accept piped data, STDIN redirection [<filename.txt], text strings following the command as arguments, or filenames as arguments.  Only one of these methods can be used at a time, so please see the note on precedence.

* PRECEDENCE *
STDIN redirection has precedence, then piped input, then a filename as an argument, and finally text strings as an arguments.

  EXAMPLE:
  echo piped | "$0" arguments.txt < stdin_redirection.txt

In this example, the contents of file_as_stdin_redirection.txt would be uploaded. Both the piped_text and the file_as_argument.txt are ignored. If there is piped input and arguments, the arguments will be ignored, and the piped input uploaded.

* FILENAMES *
If a filename is misspelled or doesn't have the necessary path description, it will NOT generate an error, but will instead treat it as a text string and upload it.
--------------------------------------------------------------------------

EOF
    exit
}

if [ -t 0 ]; then
    echo Running interactively, checking for arguments... >&2
    if [ "$*" ]; then
	echo Arguments present... >&2
	if [ "$*"="--help" ]; then
	    printhelp
	else
	    if [ -f "$*" ]; then
		echo Uploading the contents of "$*"... >&2
		cat "$*"
	    else
		echo Uploading the text: \""$*"\"... >&2
		echo "$*"
	    fi | curl -F 'sprunge=<-' http://sprunge.us
	fi
    else
	echo No arguments found, printing USAGE and exiting. >&2
	printusage
    fi
else
    echo Using input from a pipe or STDIN redirection... >&2
    while read -r line ; do
	echo $line
    done | curl -F 'sprunge=<-' http://sprunge.us
fi
